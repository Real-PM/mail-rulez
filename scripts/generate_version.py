#!/usr/bin/env python3
"""
Version Generation Script for Mail-Rulez

Combines VERSION.txt with git commit count to create full version string.
Generates version.py file for use by the application.
"""

import os
import subprocess
import sys
from datetime import datetime
from pathlib import Path

def get_git_commit_count():
    """Get total commit count from git"""
    try:
        result = subprocess.run(
            ['git', 'rev-list', '--count', 'HEAD'],
            capture_output=True,
            text=True,
            check=True
        )
        return int(result.stdout.strip())
    except (subprocess.CalledProcessError, ValueError, FileNotFoundError):
        # Fallback if git is not available or not in a git repo
        return 1

def get_git_commit_hash():
    """Get current git commit hash (short)"""
    try:
        result = subprocess.run(
            ['git', 'rev-parse', '--short', 'HEAD'],
            capture_output=True,
            text=True,
            check=True
        )
        return result.stdout.strip()
    except (subprocess.CalledProcessError, FileNotFoundError):
        return "unknown"

def get_base_version():
    """Read version from VERSION.txt"""
    script_dir = Path(__file__).parent.parent
    version_file = script_dir / "VERSION.txt"
    
    try:
        with open(version_file, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        print(f"ERROR: VERSION.txt not found at {version_file}")
        return "0.0.0"

def generate_version_info():
    """Generate complete version information"""
    base_version = get_base_version()
    build_number = get_git_commit_count()
    commit_hash = get_git_commit_hash()
    build_date = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')
    
    full_version = f"{base_version}-{build_number}"
    
    return {
        'base_version': base_version,
        'build_number': build_number,
        'full_version': full_version,
        'commit_hash': commit_hash,
        'build_date': build_date
    }

def write_version_py(version_info):
    """Write version.py file with version information"""
    script_dir = Path(__file__).parent.parent
    version_py = script_dir / "version.py"
    
    content = f'''"""
Auto-generated version information for Mail-Rulez
DO NOT EDIT THIS FILE MANUALLY - Generated by scripts/generate_version.py
"""

__version__ = "{version_info['full_version']}"
__base_version__ = "{version_info['base_version']}"
__build_number__ = {version_info['build_number']}
__commit_hash__ = "{version_info['commit_hash']}"
__build_date__ = "{version_info['build_date']}"

# For backward compatibility
VERSION = __version__
'''
    
    with open(version_py, 'w') as f:
        f.write(content)
    
    print(f"Generated version.py: {version_info['full_version']}")
    return version_py

def main():
    """Main function"""
    print("Generating Mail-Rulez version information...")
    
    version_info = generate_version_info()
    
    print(f"Base Version: {version_info['base_version']}")
    print(f"Build Number: {version_info['build_number']}")
    print(f"Full Version: {version_info['full_version']}")
    print(f"Commit Hash: {version_info['commit_hash']}")
    print(f"Build Date: {version_info['build_date']}")
    
    version_py = write_version_py(version_info)
    print(f"Version file written to: {version_py}")
    
    return version_info

if __name__ == '__main__':
    main()